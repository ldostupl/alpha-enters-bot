from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from fastapi import FastAPI, Request
import uvicorn
import os
import asyncio

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

if not API_TOKEN or not CHANNEL_ID:
    raise ValueError("API_TOKEN –∏–ª–∏ CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω—ã!")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç Alpha Enters —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π /signal —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –∫–∞–Ω–∞–ª.")


@dp.message_handler(commands=["signal"])
async def handle_signal(message: types.Message):
    text = message.get_args()
    if not text:
        await message.reply("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /signal –í—Ö–æ–¥ LONG –ø–æ BTC —Å TP –∏ SL")
        return
    await bot.send_message(CHANNEL_ID, text, parse_mode=ParseMode.MARKDOWN)
    await message.reply("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")


@app.post("/webhook")
async def webhook_tv(request: Request):
    data = await request.json()
    msg = data.get("message")
    if msg:
        asyncio.create_task(bot.send_message(CHANNEL_ID, msg, parse_mode=ParseMode.MARKDOWN))
        return {"status": "sent"}
    return {"status": "no_message"}


# üëá –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏ FastAPI, –∏ –±–æ—Ç–∞
async def main():
    loop = asyncio.get_event_loop()
    loop.create_task(uvicorn.run(app, host="0.0.0.0", port=8000))
    await dp.start_polling()


if __name__ == "__main__":
    asyncio.run(main())
