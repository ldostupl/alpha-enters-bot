from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from fastapi import FastAPI, Request
from uvicorn import Config, Server
import uvicorn
import os
import asyncio

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

if not API_TOKEN or not CHANNEL_ID:
    raise ValueError("‚ùå API_TOKEN –∏–ª–∏ CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç Alpha Enters —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π /signal —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –∫–∞–Ω–∞–ª.")


@dp.message_handler(commands=['signal'])
async def handle_signal(message: types.Message):
    text = message.get_args()
    if not text:
        await message.reply("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /signal long btc entry 61200 tp 61800 62300 62900 sl 60400")
        return

    try:
        parts = text.lower().split()
        direction = parts[0].upper()         # long
        asset = parts[1].upper()             # btc
        entry_price = parts[parts.index("entry") + 1]
        tp_index = parts.index("tp")
        sl_index = parts.index("sl")
        tps = parts[tp_index + 1:sl_index]   # [61800, 62300, 62900]
        sl_price = parts[sl_index + 1]

        tp_text = " / ".join(tps)

        formatted = (
            f"üì¢ *–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç Alpha Enters*:\n\n"
            f"üî∏ –í—Ö–æ–¥: {direction}\n"
            f"üí∞ –ê–∫—Ç–∏–≤: {asset}\n"
            f"üéØ TP: {tp_text}\n"
            f"üõ°Ô∏è SL: {sl_price}"
        )
        await bot.send_message(CHANNEL_ID, formatted, parse_mode=ParseMode.MARKDOWN)
        await message.reply("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")



@app.post("/webhook")
async def webhook_tv(request: Request):
    data = await request.json()
    msg = data.get("message")
    if msg:
        asyncio.create_task(bot.send_message(CHANNEL_ID, msg, parse_mode=ParseMode.MARKDOWN))
        return {"status": "sent"}
    return {"status": "no_message"}


async def main():
    # üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
    config = Config(app=app, host="0.0.0.0", port=8000, log_level="info")
    server = Server(config)

    # üîÉ –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    loop = asyncio.get_running_loop()
    loop.create_task(server.serve())

    # ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º aiogram
    await dp.start_polling()


if __name__ == "__main__":
    asyncio.run(main())
