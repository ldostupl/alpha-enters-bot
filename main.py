from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ParseMode
from fastapi import FastAPI, Request
import uvicorn
import os
import threading
import asyncio

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ ID –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω—ã
if not API_TOKEN or not CHANNEL_ID:
    raise ValueError("‚ùå API_TOKEN –∏–ª–∏ CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ FastAPI
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

# üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç Alpha Enters —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π /signal —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –∫–∞–Ω–∞–ª.")

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /signal
@dp.message_handler(commands=['signal'])
async def handle_signal(message: types.Message):
    text = message.get_args()
    if not text:
        await message.reply("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä: /signal –í—Ö–æ–¥ LONG –ø–æ BTC —Å TP –∏ SL")
        return
    await bot.send_message(CHANNEL_ID, text, parse_mode=ParseMode.MARKDOWN)
    await message.reply("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")

# üîó Webhook –¥–ª—è TradingView –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
@app.post("/webhook")
async def webhook_tv(request: Request):
    data = await request.json()
    print(f"üì© Webhook received: {data}")  # –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    msg = data.get("message")
    if msg:
        asyncio.create_task(bot.send_message(CHANNEL_ID, msg, parse_mode=ParseMode.MARKDOWN))
        return {"status": "sent"}
    return {"status": "no_message"}

# üåê –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start():
    uvicorn.run(app, host="0.0.0.0", port=8000)

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    threading.Thread(target=start).start()
    executor.start_polling(dp, skip_updates=True)
